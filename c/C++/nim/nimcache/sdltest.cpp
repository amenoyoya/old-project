/* Generated by Nim Compiler v0.10.2 */
/*   (c) 2014 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Windows, i386, gcc */
/* Command for C compiler:
   g++.exe -c -w -fpermissive -DSDL_MAIN_HANDLED -O3 -fno-strict-aliasing  -IC:\App\native-toolchain\nim-0.10.2\lib -o c:\users\nigahachi\desktop\projectc++\nim\nimcache\sdltest.o c:\users\nigahachi\desktop\projectc++\nim\nimcache\sdltest.cpp */
#define NIM_INTBITS 32
#include "nimbase.h"

#include <SDL.h>

#include <stdio.h>
struct TGenericSeq;
struct NimStringDesc;
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
#include <SDL.h>
bool isNULL(void *ptr){return NULL == ptr;}
unsigned int event(SDL_Event *e){return e->type;}

N_NIMCALL(void, main_100086)(void);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
static N_INLINE(void, initStackBottomWith)(void* locals);
N_NOINLINE(void, setStackBottom)(void* thestackbottom);
NIM_EXTERNC N_NOINLINE(void, systemInit)(void);
NIM_EXTERNC N_NOINLINE(void, systemDatInit)(void);
NIM_EXTERNC N_NOINLINE(void, HEX00_parseutilsInit)(void);
NIM_EXTERNC N_NOINLINE(void, HEX00_parseutilsDatInit)(void);
NIM_EXTERNC N_NOINLINE(void, HEX00_strutilsInit)(void);
NIM_EXTERNC N_NOINLINE(void, HEX00_strutilsDatInit)(void);
NIM_EXTERNC N_NOINLINE(void, sdltestInit)(void);
NIM_EXTERNC N_NOINLINE(void, sdltestDatInit)(void);
STRING_LITERAL(TMP9, "SDL_Init error: ", 16);
STRING_LITERAL(TMP10, "SDL_CreateWindow error: ", 24);

N_NIMCALL(void, main_100086)(void) {
	SDL_Window* win;
	SDL_Event* e;
	NIM_BOOL quit;
	{
		NI LOC3;
		NCSTRING LOC6;
		NimStringDesc* LOC7;
		LOC3 = 0;
		LOC3 = SDL_Init(32);
		if (!!((LOC3 == 0))) goto LA4;
		LOC6 = 0;
		LOC6 = SDL_GetError();
		LOC7 = 0;
		LOC7 = cstrToNimstr(LOC6);
		printf("%s%s\015\012", (((NimStringDesc*) &TMP9))->data, (LOC7)->data);
		goto BeforeRet;
	}
	LA4: ;
	win = SDL_CreateWindow("\343\201\223\343\202\223\343\201\253\343\201\241\343\201\257\344\270\226\347\225\214!", 100, 100, 640, 480, 4);
	e = new SDL_Event();
	quit = NIM_FALSE;
	{
		NIM_BOOL LOC10;
		NCSTRING LOC13;
		NimStringDesc* LOC14;
		LOC10 = 0;
		LOC10 = isNULL(win);
		if (!LOC10) goto LA11;
		LOC13 = 0;
		LOC13 = SDL_GetError();
		LOC14 = 0;
		LOC14 = cstrToNimstr(LOC13);
		printf("%s%s\015\012", (((NimStringDesc*) &TMP10))->data, (LOC14)->data);
		SDL_Quit();
		goto BeforeRet;
	}
	LA11: ;
	{
		while (1) {
			if (!!(quit)) goto LA16;
			{
				while (1) {
					NIM_BOOL LOC19;
					LOC19 = 0;
					LOC19 = SDL_PollEvent(e);
					if (!LOC19) goto LA18;
					{
						NI LOC22;
						LOC22 = 0;
						LOC22 = event(e);
						if (!(LOC22 == 256)) goto LA23;
						quit = NIM_TRUE;
					}
					LA23: ;
				} LA18: ;
			}
			SDL_Delay(1);
		} LA16: ;
	}
	SDL_Quit();
	BeforeRet: ;
}

static N_INLINE(void, initStackBottomWith)(void* locals) {
	setStackBottom(locals);
}
void PreMainInner() {
	systemInit();
	HEX00_parseutilsDatInit();
	HEX00_strutilsDatInit();
	sdltestDatInit();
	HEX00_parseutilsInit();
	HEX00_strutilsInit();
}

void PreMain() {
	void (*volatile inner)();
	systemDatInit();
	inner = PreMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int cmdCount;
char** cmdLine;
char** gEnv;
N_CDECL(void, NimMainInner)(void) {
	sdltestInit();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)();
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

NIM_EXTERNC N_NOINLINE(void, sdltestInit)(void) {
	main_100086();
}

NIM_EXTERNC N_NOINLINE(void, sdltestDatInit)(void) {
}

