namespace s3{
	namespace win32{
		/* プロセスメモリ操作クラス */
		class Process{
		public:
			Process();
			~Process();
			
			// 起動中の全プロセスを取得する(これを行ってからopenする)
			static bool getAll();
			
			// 指定プロセスをオープンして、メモリを操作できるようにする
			bool open(const char *name);
			bool open(u32 id);
			
			void close();
			
			// 指定プロセスを起動して、メモリを操作できるようにする
			// pathには、実行したいアプリ名と引数の両方を渡すことができる
			bool exec(const char *path);
			
			/* プロセスメモリ読み込み＆書き込み */
			bool read(u32 address, void *dest, u32 size);
			
			// バイト数を指定して指定アドレスの値を取得
			u32 get(u32 address, u8 byte=4);
			
			// メモリを書き込む際、bufの型には十分注意すること。
			// 1byteずつの値の配列を渡す際には、unsigned char[]をbufに渡し、
			// 間違ってもint[]を渡してはならない。
			bool write(u32 address, const void *buf, u32 size);
			
			// 文字列を使った特殊な書き込み
			// 2文字ずつの単位で16進数WORDとして書き込んでいく
			// ??で指定された部分の値は変更しない
			bool puts(u32 address, const char *exp);
			
			bool set(u32 address, u32 val, u32 byte=4);
			
			// プロセスが呼び出したモジュールを内部で列挙する
			// モジュール数が返る
			u32 enumModules();
			
			// enumModule実行後：モジュール名を取得
			string getModuleName(u32 index);
			
			// enumModule実行後：モジュール名からモジュールハンドルを検索
			u32 getModule(const char *name);
			
			// 現在のプロセスが終了したか
			bool isExit();
			
			// 開いているプロセスを終了させる
			bool kill();
			
			// 開いているプロセスのID
			u32 pid() const;
			
			// 開いているプロセスのウィンドウハンドル
			u32 hwnd() const;
			// プロセスハンドル
			u32 handle() const;
			
			// 取得したプロセスの数、ID等
			static u32 getNum();
			static u32 getID(u32 n);
			static string getName(u32 n);
		};
		
		
		/* ----- レジストリ操作クラス ----- */
		class Registry{
		public:
			Registry();
			~Registry();
			
			bool open(u32 key, const char *sub);
			bool create(u32 key, const char *sub);
			void close();
			
			// nameにNULLを指定すると、(既定)になる
			// 戻り値：type
			//u32 getVal(Binary *data, const char *name);	//一般的
			//u32 getStr(Binary *data, const char *name);	//データをREG_SZ(文字列)で取得
			
			//nameにNULLを指定すると、(既定)になる
			bool setVal(const char *name, u32 data);
			
			bool setStr(const char *name, const char *data);
			
			void remove(u32 MAX_KEY_LENGTH=256);		//openしているレジストリキーを削除
			
			bool remove(const char *name);
			
			//レジストリ変更をすぐに反映する
			static void reflect();
		};
		
		
		/* ----- ショートカット作成 ----- */
		class ShellLink{
		public:
			ShellLink();
			ShellLink(const char *path, const char *args=NULL);
			~ShellLink();
			
			bool failed() const;
			
			bool open(const char *path, const char *args="");
			void close();
			
			// 拡張子に.lnkを付けて指定しなければならない
			bool save(const char *path);
			
			bool setWorkDir(const char *dir);
			bool setDescription(const char *str);
			
			// アイコンファイルは、exeでもdllでも良いが、
			// SYSTEMパス内のファイルか、フルパスを指定する必要がある
			bool setIcon(const char *icofile, u32 index=0);
		};
	}
}
