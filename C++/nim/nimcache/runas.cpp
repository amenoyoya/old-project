/* Generated by Nim Compiler v0.10.2 */
/*   (c) 2014 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Windows, i386, gcc */
/* Command for C compiler:
   g++.exe -c -w -fpermissive -O3 -fno-strict-aliasing  -IC:\App\native-toolchain\nim-0.10.2\lib -o c:\users\nigahachi\desktop\projectc++\nim\nimcache\runas.o c:\users\nigahachi\desktop\projectc++\nim\nimcache\runas.cpp */
#define NIM_INTBITS 32
#include "nimbase.h"

#include "windows.h"
static N_INLINE(void, initStackBottomWith)(void* locals);
N_NOINLINE(void, setStackBottom)(void* thestackbottom);
NIM_EXTERNC N_NOINLINE(void, systemInit)(void);
NIM_EXTERNC N_NOINLINE(void, systemDatInit)(void);
NIM_EXTERNC N_NOINLINE(void, runasInit)(void);
NIM_EXTERNC N_NOINLINE(void, runasDatInit)(void);

static N_INLINE(void, initStackBottomWith)(void* locals) {
	setStackBottom(locals);
}
void PreMainInner() {
	systemInit();
	runasDatInit();
}

void PreMain() {
	void (*volatile inner)();
	systemDatInit();
	inner = PreMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int cmdCount;
char** cmdLine;
char** gEnv;
N_CDECL(void, NimMainInner)(void) {
	runasInit();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)();
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

NIM_EXTERNC N_NOINLINE(void, runasInit)(void) {
	int LOC1;
	LOC1 = 0;
	LOC1 = ShellExecuteA(NIM_NIL, "runas", "cmd.exe", "/k", NIM_NIL, ((int) 5));
}

NIM_EXTERNC N_NOINLINE(void, runasDatInit)(void) {
}

